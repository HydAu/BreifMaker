#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BM
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Focus")]
	public partial class DataClassesBrfsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBrief(Brief instance);
    partial void UpdateBrief(Brief instance);
    partial void DeleteBrief(Brief instance);
    #endregion
		
		public DataClassesBrfsDataContext() : 
				base(global::BM.Properties.Settings.Default.StreamMomentsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBrfsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBrfsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBrfsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesBrfsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Brief> Briefs
		{
			get
			{
				return this.GetTable<Brief>();
			}
		}
		
		public System.Data.Linq.Table<Symbol> Symbols
		{
			get
			{
				return this.GetTable<Symbol>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Briefs")]
	public partial class Brief : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BriefID;
		
		private System.Data.Linq.Binary _BriefBytes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBriefIDChanging(int value);
    partial void OnBriefIDChanged();
    partial void OnBriefBytesChanging(System.Data.Linq.Binary value);
    partial void OnBriefBytesChanged();
    #endregion
		
		public Brief()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BriefID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BriefID
		{
			get
			{
				return this._BriefID;
			}
			set
			{
				if ((this._BriefID != value))
				{
					this.OnBriefIDChanging(value);
					this.SendPropertyChanging();
					this._BriefID = value;
					this.SendPropertyChanged("BriefID");
					this.OnBriefIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BriefBytes", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary BriefBytes
		{
			get
			{
				return this._BriefBytes;
			}
			set
			{
				if ((this._BriefBytes != value))
				{
					this.OnBriefBytesChanging(value);
					this.SendPropertyChanging();
					this._BriefBytes = value;
					this.SendPropertyChanged("BriefBytes");
					this.OnBriefBytesChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Symbols")]
	public partial class Symbol
	{
		
		private short _SymbolID;
		
		private string _FullName;
		
		private string _Type;
		
		private string _Market;
		
		private string _Name;
		
		private System.Nullable<bool> _TradeEnabled;
		
		private System.Nullable<int> _TradeQuantity;
		
		private System.Nullable<double> _Value;
		
		private System.Nullable<double> _AvgVol;
		
		private System.Nullable<double> _MarketCap;
		
		private string _TickTypesToCapture;
		
		public Symbol()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SymbolID", DbType="SmallInt NOT NULL")]
		public short SymbolID
		{
			get
			{
				return this._SymbolID;
			}
			set
			{
				if ((this._SymbolID != value))
				{
					this._SymbolID = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NChar(32)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this._FullName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="NChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this._Type = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Market", DbType="NChar(10)")]
		public string Market
		{
			get
			{
				return this._Market;
			}
			set
			{
				if ((this._Market != value))
				{
					this._Market = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeEnabled", DbType="Bit")]
		public System.Nullable<bool> TradeEnabled
		{
			get
			{
				return this._TradeEnabled;
			}
			set
			{
				if ((this._TradeEnabled != value))
				{
					this._TradeEnabled = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TradeQuantity", DbType="Int")]
		public System.Nullable<int> TradeQuantity
		{
			get
			{
				return this._TradeQuantity;
			}
			set
			{
				if ((this._TradeQuantity != value))
				{
					this._TradeQuantity = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Float")]
		public System.Nullable<double> Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvgVol", DbType="Float")]
		public System.Nullable<double> AvgVol
		{
			get
			{
				return this._AvgVol;
			}
			set
			{
				if ((this._AvgVol != value))
				{
					this._AvgVol = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketCap", DbType="Float")]
		public System.Nullable<double> MarketCap
		{
			get
			{
				return this._MarketCap;
			}
			set
			{
				if ((this._MarketCap != value))
				{
					this._MarketCap = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TickTypesToCapture", DbType="NChar(32)")]
		public string TickTypesToCapture
		{
			get
			{
				return this._TickTypesToCapture;
			}
			set
			{
				if ((this._TickTypesToCapture != value))
				{
					this._TickTypesToCapture = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
